
Данное приложение производит обработку ввода, включая проверку синтаксиса на соответствие правилам построения математического выражения, пошаговую компиляцию в обратную польскую запись и интерпретацию.
Результат обработки направляется в поле вывода и может содержать описание ошибки или результат интерпретации.

Поддерживаются знаки операций: ()+, -, /, *, унарный минус
			       числа с плавающей запятой. 			  
Ограничение  размера однократного ввода - 500 символов.
Вывод ошибок имеет вид:
"Not a valid " + character + " at position " + position + " or adjacent token";
В папке Build_WebGL содержится работоспособная сборка под WebGL (запускать с диска в firefox или с сервера).

Архитектура приложения: 

Программа представляет собой алгоритм линейного времени O(n). 
ООП не используется, наследование от Monobehaviour только в классе Input_Output,
Применяются статические классы и члены, что бы не создавать экземпляр класса и 
сократить расходы на garbage collector.

Алгоритм работы:

По нажатию на кнопку "processing" вызывается  OnSubmitProcessing() из Input_Output 
для принятия ввода, обработки и вывода:

input = inputField.text;
output.text = Application.Processing(input);

В Application.Processing(string input) происходит компиляция, проверка синтаксиса и, если ошибок нет, 
интерпретация обьектного кода.

Compiler.Сompilation(input);

if (Compiler.error == "")
{
    return "Result: " + Interpreter.Interpretation();
}
return Compiler.error;

Класс Compiler реализует пошаговый компилятор на основе алгоритма Э́дсгера Де́йкстры "сортировочная станция" 
для перевода из инфиксной нотации в постфиксную (обратную польскую запись).
Обьектный код сохраняется в List<double>, индексы (положение) операторов сохраняется в List<int>.
(Можно было использовать List<object>, но упаковка-преобразование и распаковка-преобразование обьектов,
вероятно менее эффективна)
Проверки синтаксиса вынесенны в отдельный класс Syntax_Validator.

Класс Interpreter реализует пошаговый интерпретатор обьектного кода (выражения в постфиксной записи).
Результат интерпретации сохраняется в стек.

Возможные оптимизации:

Если нужно использовать ООП и снизить нагрузку на CPU

1) Сделать пул обьектов (если будет больше обьектов, сейчас не выгодно)
2) Применить шаблон Singleton

Если нужна производительность (при большом размере входных данных и не на WebGL)

3) Вынести Application.Processing в отдельный поток, т.к. сейчас вычисления производятся в основном потоке Unity.
3) Применить Job System (придется писать систему для обработки строк, т.к. поддерживаются только blittable типы)
